@page "/admin/providers"

@inject ProvidersClient ProvidersClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudPaper Class="pa-3">

    <!-- Encabezado responsive -->
    <MudGrid Spacing="2" AlignItems="Center" Class="mb-2">
        <!-- Título -->
        <MudItem xs="12" sm="4" md="3">
            <MudText Typo="Typo.h6" Class="mb-0">Proveedores</MudText>
        </MudItem>

        <!-- Buscador -->
        <MudItem xs="12" sm="6" md="6">
            <MudTextField T="string"
                          Value="_searchText"
                          ValueChanged="@(async v => await OnSearchChanged(v))"
                          Placeholder="Buscar por nombre, ruc, contacto…"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          Immediate="true"
                          DebounceInterval="300"
                          FullWidth="true" />
        </MudItem>

        <!-- Botón Nuevo -->
        <MudItem xs="12" sm="2" md="3" Class="d-flex" Style="justify-content:flex-end;">
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.Add"
                       OnClick="CreateAsync">
                Nuevo
            </MudButton>
        </MudItem>
    </MudGrid>

    <!-- Tabla con paginado/sort en servidor -->
    <MudTable T="Provider"
              @ref="_table"
              ServerData="LoadServerData"
              Hover="true"
              Dense="true"
              Bordered="true"
              Breakpoint="Breakpoint.Sm"
              Elevation="0">

        <HeaderContent>
            <MudTh>
                <MudTableSortLabel T="string" SortLabel="Name" InitialDirection="SortDirection.Ascending">
                    Nambre
                </MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel T="string" SortLabel="TaxId">Ruc</MudTableSortLabel>
            </MudTh>
            <MudTh>Contacto</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>Teléfono</MudTh>
            <MudTh>Status</MudTh>
            <MudTh Class="text-end">Actions</MudTh>
        </HeaderContent>

        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Tax Id">@context.TaxId</MudTd>
            <MudTd DataLabel="Contact">@context.ContactName</MudTd>
            <MudTd DataLabel="Email">@context.Email</MudTd>
            <MudTd DataLabel="Phone">@context.Phone</MudTd>
            <MudTd DataLabel="Status">
                <MudChip T="bool" Color="@(context.IsActive ? Color.Success : Color.Error)"
                         Variant="Variant.Outlined"
                         Size="Size.Small">
                    @(context.IsActive ? "Si" : "No")
                </MudChip>
            </MudTd>
            <MudTd Class="text-end">
                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                               Size="Size.Small"
                               OnClick="@(() => EditAsync(context))" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                               Size="Size.Small"
                               Color="Color.Error"
                               OnClick="@(() => DeleteAsync(context))" />
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>

@code {
    private string _searchText = string.Empty;
    private MudTable<Provider>? _table;

    // Recarga la tabla cuando cambia el texto de búsqueda
    private async Task OnSearchChanged(string value)
    {
        _searchText = value;
        if (_table is not null)
            await _table.ReloadServerData();
    }

    // Firma correcta para ServerData en MudBlazor 12.x
    private async Task<TableData<Provider>> LoadServerData(TableState state, CancellationToken cancellationToken)
    {
        var sortBy  = string.IsNullOrWhiteSpace(state.SortLabel) ? "Name" : state.SortLabel!;
        var sortDir = state.SortDirection == SortDirection.Descending ? "desc" : "asc";
        var page    = state.Page + 1;                 // MudTable usa 0-based; tu API es 1-based
        var size    = state.PageSize == 0 ? 10 : state.PageSize;

        var result = await ProvidersClient.GetPagedAsync(
            term: _searchText,
            page: page,
            recordsNumber: size,
            sortBy: sortBy,
            sortDir: sortDir,
            cancellationToken: cancellationToken);

        return new TableData<Provider>
        {
            Items = result?.Items ?? Array.Empty<Provider>(),
            TotalItems = result?.Total ?? 0
        };
    }

    private static readonly DialogOptions _dialogOptions = new()
    {
        CloseOnEscapeKey = true,
        FullWidth = true,
        MaxWidth = MaxWidth.Small
    };

    private async Task CreateAsync()
    {
        var parameters = new DialogParameters
        {
            { nameof(ProviderDialog.Model), new Provider { IsActive = true } }
        };

        var dialogRef = await DialogService.ShowAsync<ProviderDialog>("Nuevo proveedor", parameters, _dialogOptions);
        var result = await dialogRef.Result;

        if (!result.Canceled && _table is not null)
            await _table.ReloadServerData();
    }

    private async Task EditAsync(Provider provider)
    {
        var parameters = new DialogParameters
        {
            { nameof(ProviderDialog.Model), provider }
        };

        var dialogRef = await DialogService.ShowAsync<ProviderDialog>("Editar proveedor", parameters, _dialogOptions);
        var result = await dialogRef.Result;

        if (!result.Canceled && _table is not null)
            await _table.ReloadServerData();
    }

    private async Task DeleteAsync(Provider provider)
    {
        bool confirm = await DialogService.ShowMessageBox(
            "Eliminar",
            (MarkupString)$"Eliminar proveedor: <b>{provider.Name}</b>?",
            yesText: "Eliminar", cancelText: "Cancelar") == true;

        if (!confirm) return;

        var ok = await ProvidersClient.DeleteAsync(provider.Id);
        if (ok)
        {
            Snackbar.Add("Deleted", Severity.Success);
            if (_table is not null) await _table.ReloadServerData();
        }
        else
        {
            Snackbar.Add("Delete failed", Severity.Error);
        }
    }
}
